package lab;/*Author: Frank M. Carrano * by Mark Hawes, Alain Njipwo, Jonathan Lee, and Zach Albers *  * toArray can be included. It provides a full list of what is in the stack in a way that * is more secure and easier to read. */import java.util.ArrayList;import java.util.EmptyStackException;/** * A class of stacks whose entries are stored in a chain of nodes. *  * @author Frank M. Carrano and Timothy M. Henry * @version 4.0 */public class LinkedStack<T> implements StackInterface<T>{	private Node topNode; // References the first node in the chain	public LinkedStack()	{		topNode = null;	} // end default constructor	// < Implementations of the stack operations go here. >	// . . .	private class Node	{		private T data; // Entry in stack		private Node next; // Link to next node		private Node(T dataPortion)		{			this(dataPortion, null);		} // end constructor		private Node(T dataPortion, Node linkPortion)		{			data = dataPortion;			next = linkPortion;		} // end constructor		private T getData()		{			return data;		} // end getData		private void setData(T newData)		{			data = newData;		} // end setData		private Node getNextNode()		{			return next;		} // end getNextNode		private void setNextNode(Node nextNode)		{			next = nextNode;		} // end setNextNode	} // end Node	@Override	public void push(T newEntry)	{		topNode = new Node(newEntry, topNode);	} // end push	@Override	public T pop()	{		T top = peek(); // Might throw EmptyStackException		assert (topNode != null);		topNode = topNode.getNextNode();		return top;	}	@Override	public T peek()	{		if (isEmpty())			throw new EmptyStackException();		else			return topNode.getData();	} // end peek	@Override	public boolean isEmpty()	{		return topNode == null;	} // end isEmpty	@Override	public void clear()	{		topNode = null; // Causes deallocation of nodes in the chain	} // end clear	public T[] toArray()	{		ArrayList<T> array = new ArrayList<T>();		int index = 0;		while (!isEmpty())		{			array.add(pop());		}		Object[] arr = new Object[array.size()];		for (int i = array.size() - 1; i > 0; i--)		{			push((T) array.get(i));			arr[i] = array.get(i);		}		return (T[]) arr;	}} // end LinkedStack